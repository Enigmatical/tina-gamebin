//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  game: Game;
  gameConnection: GameConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGameArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryGameConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<GameFilter>;
};

export type DocumentFilter = {
  game?: InputMaybe<GameFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = Game;

export type GameMeta = {
  __typename?: 'GameMeta';
  genre?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
  medium?: Maybe<Scalars['String']>;
};

export type GameSectionsDetails = {
  __typename?: 'GameSectionsDetails';
  dateReleased?: Maybe<Scalars['String']>;
  averageRating?: Maybe<Scalars['String']>;
  averagePlaytime?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  learnMoreLink?: Maybe<Scalars['String']>;
};

export type GameSectionsBacklog = {
  __typename?: 'GameSectionsBacklog';
  interest?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
};

export type GameSectionsReview = {
  __typename?: 'GameSectionsReview';
  dateFinished?: Maybe<Scalars['String']>;
  stars?: Maybe<Scalars['String']>;
  playtime?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
};

export type GameSections = GameSectionsDetails | GameSectionsBacklog | GameSectionsReview;

export type Game = Node & Document & {
  __typename?: 'Game';
  name?: Maybe<Scalars['String']>;
  deck?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  meta?: Maybe<GameMeta>;
  sections?: Maybe<Array<Maybe<GameSections>>>;
  boxart?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type GameMetaFilter = {
  genre?: InputMaybe<StringFilter>;
  platform?: InputMaybe<StringFilter>;
  medium?: InputMaybe<StringFilter>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type GameSectionsDetailsFilter = {
  dateReleased?: InputMaybe<DatetimeFilter>;
  averageRating?: InputMaybe<StringFilter>;
  averagePlaytime?: InputMaybe<StringFilter>;
  content?: InputMaybe<StringFilter>;
  learnMoreLink?: InputMaybe<StringFilter>;
};

export type GameSectionsBacklogFilter = {
  interest?: InputMaybe<StringFilter>;
  content?: InputMaybe<StringFilter>;
};

export type GameSectionsReviewFilter = {
  dateFinished?: InputMaybe<DatetimeFilter>;
  stars?: InputMaybe<StringFilter>;
  playtime?: InputMaybe<StringFilter>;
  content?: InputMaybe<StringFilter>;
};

export type GameSectionsFilter = {
  details?: InputMaybe<GameSectionsDetailsFilter>;
  backlog?: InputMaybe<GameSectionsBacklogFilter>;
  review?: InputMaybe<GameSectionsReviewFilter>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type GameFilter = {
  name?: InputMaybe<StringFilter>;
  deck?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  meta?: InputMaybe<GameMetaFilter>;
  sections?: InputMaybe<GameSectionsFilter>;
  boxart?: InputMaybe<ImageFilter>;
};

export type GameConnectionEdges = {
  __typename?: 'GameConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Game>;
};

export type GameConnection = Connection & {
  __typename?: 'GameConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<GameConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateGame: Game;
  createGame: Game;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateGameArgs = {
  relativePath: Scalars['String'];
  params: GameMutation;
};


export type MutationCreateGameArgs = {
  relativePath: Scalars['String'];
  params: GameMutation;
};

export type DocumentMutation = {
  game?: InputMaybe<GameMutation>;
};

export type GameMetaMutation = {
  genre?: InputMaybe<Scalars['String']>;
  platform?: InputMaybe<Scalars['String']>;
  medium?: InputMaybe<Scalars['String']>;
};

export type GameSectionsDetailsMutation = {
  dateReleased?: InputMaybe<Scalars['String']>;
  averageRating?: InputMaybe<Scalars['String']>;
  averagePlaytime?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
  learnMoreLink?: InputMaybe<Scalars['String']>;
};

export type GameSectionsBacklogMutation = {
  interest?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
};

export type GameSectionsReviewMutation = {
  dateFinished?: InputMaybe<Scalars['String']>;
  stars?: InputMaybe<Scalars['String']>;
  playtime?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
};

export type GameSectionsMutation = {
  details?: InputMaybe<GameSectionsDetailsMutation>;
  backlog?: InputMaybe<GameSectionsBacklogMutation>;
  review?: InputMaybe<GameSectionsReviewMutation>;
};

export type GameMutation = {
  name?: InputMaybe<Scalars['String']>;
  deck?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  meta?: InputMaybe<GameMetaMutation>;
  sections?: InputMaybe<Array<InputMaybe<GameSectionsMutation>>>;
  boxart?: InputMaybe<Scalars['String']>;
};

export type SysPartsFragment = { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string, collection: { __typename?: 'Collection', slug: string } };

export type ListPartsFragment = { __typename?: 'GameConnection', totalCount: number, edges?: Array<{ __typename?: 'GameConnectionEdges', node?: { __typename?: 'Game', id: string, name?: string | null, deck?: string | null, status?: string | null, boxart?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string, collection: { __typename?: 'Collection', slug: string } }, meta?: { __typename: 'GameMeta', genre?: string | null, platform?: string | null, medium?: string | null } | null, sections?: Array<{ __typename: 'GameSectionsDetails', dateReleased?: string | null, averageRating?: string | null, averagePlaytime?: string | null, content?: string | null, learnMoreLink?: string | null } | { __typename: 'GameSectionsBacklog', interest?: string | null, content?: string | null } | { __typename: 'GameSectionsReview', dateFinished?: string | null, stars?: string | null, playtime?: string | null, content?: string | null } | null> | null } | null } | null> | null };

export type GamesByNameQueryVariables = Exact<{ [key: string]: never; }>;


export type GamesByNameQuery = { __typename?: 'Query', gameConnection: { __typename?: 'GameConnection', totalCount: number, edges?: Array<{ __typename?: 'GameConnectionEdges', node?: { __typename?: 'Game', id: string, name?: string | null, deck?: string | null, status?: string | null, boxart?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string, collection: { __typename?: 'Collection', slug: string } }, meta?: { __typename: 'GameMeta', genre?: string | null, platform?: string | null, medium?: string | null } | null, sections?: Array<{ __typename: 'GameSectionsDetails', dateReleased?: string | null, averageRating?: string | null, averagePlaytime?: string | null, content?: string | null, learnMoreLink?: string | null } | { __typename: 'GameSectionsBacklog', interest?: string | null, content?: string | null } | { __typename: 'GameSectionsReview', dateFinished?: string | null, stars?: string | null, playtime?: string | null, content?: string | null } | null> | null } | null } | null> | null } };

export type BacklogGamesByNameQueryVariables = Exact<{ [key: string]: never; }>;


export type BacklogGamesByNameQuery = { __typename?: 'Query', gameConnection: { __typename?: 'GameConnection', totalCount: number, edges?: Array<{ __typename?: 'GameConnectionEdges', node?: { __typename?: 'Game', id: string, name?: string | null, deck?: string | null, status?: string | null, boxart?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string, collection: { __typename?: 'Collection', slug: string } }, meta?: { __typename: 'GameMeta', genre?: string | null, platform?: string | null, medium?: string | null } | null, sections?: Array<{ __typename: 'GameSectionsDetails', dateReleased?: string | null, averageRating?: string | null, averagePlaytime?: string | null, content?: string | null, learnMoreLink?: string | null } | { __typename: 'GameSectionsBacklog', interest?: string | null, content?: string | null } | { __typename: 'GameSectionsReview', dateFinished?: string | null, stars?: string | null, playtime?: string | null, content?: string | null } | null> | null } | null } | null> | null } };

export type FinishedGamesByNameQueryVariables = Exact<{ [key: string]: never; }>;


export type FinishedGamesByNameQuery = { __typename?: 'Query', gameConnection: { __typename?: 'GameConnection', totalCount: number, edges?: Array<{ __typename?: 'GameConnectionEdges', node?: { __typename?: 'Game', id: string, name?: string | null, deck?: string | null, status?: string | null, boxart?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string, collection: { __typename?: 'Collection', slug: string } }, meta?: { __typename: 'GameMeta', genre?: string | null, platform?: string | null, medium?: string | null } | null, sections?: Array<{ __typename: 'GameSectionsDetails', dateReleased?: string | null, averageRating?: string | null, averagePlaytime?: string | null, content?: string | null, learnMoreLink?: string | null } | { __typename: 'GameSectionsBacklog', interest?: string | null, content?: string | null } | { __typename: 'GameSectionsReview', dateFinished?: string | null, stars?: string | null, playtime?: string | null, content?: string | null } | null> | null } | null } | null> | null } };

export type GamePartsFragment = { __typename?: 'Game', name?: string | null, deck?: string | null, status?: string | null, boxart?: string | null, meta?: { __typename: 'GameMeta', genre?: string | null, platform?: string | null, medium?: string | null } | null, sections?: Array<{ __typename: 'GameSectionsDetails', dateReleased?: string | null, averageRating?: string | null, averagePlaytime?: string | null, content?: string | null, learnMoreLink?: string | null } | { __typename: 'GameSectionsBacklog', interest?: string | null, content?: string | null } | { __typename: 'GameSectionsReview', dateFinished?: string | null, stars?: string | null, playtime?: string | null, content?: string | null } | null> | null };

export type GameQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GameQuery = { __typename?: 'Query', game: { __typename?: 'Game', id: string, name?: string | null, deck?: string | null, status?: string | null, boxart?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, meta?: { __typename: 'GameMeta', genre?: string | null, platform?: string | null, medium?: string | null } | null, sections?: Array<{ __typename: 'GameSectionsDetails', dateReleased?: string | null, averageRating?: string | null, averagePlaytime?: string | null, content?: string | null, learnMoreLink?: string | null } | { __typename: 'GameSectionsBacklog', interest?: string | null, content?: string | null } | { __typename: 'GameSectionsReview', dateFinished?: string | null, stars?: string | null, playtime?: string | null, content?: string | null } | null> | null } };

export type GameConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type GameConnectionQuery = { __typename?: 'Query', gameConnection: { __typename?: 'GameConnection', totalCount: number, edges?: Array<{ __typename?: 'GameConnectionEdges', node?: { __typename?: 'Game', id: string, name?: string | null, deck?: string | null, status?: string | null, boxart?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, meta?: { __typename: 'GameMeta', genre?: string | null, platform?: string | null, medium?: string | null } | null, sections?: Array<{ __typename: 'GameSectionsDetails', dateReleased?: string | null, averageRating?: string | null, averagePlaytime?: string | null, content?: string | null, learnMoreLink?: string | null } | { __typename: 'GameSectionsBacklog', interest?: string | null, content?: string | null } | { __typename: 'GameSectionsReview', dateFinished?: string | null, stars?: string | null, playtime?: string | null, content?: string | null } | null> | null } | null } | null> | null } };

export const SysPartsFragmentDoc = gql`
    fragment SysParts on SystemInfo {
  filename
  basename
  breadcrumbs
  path
  relativePath
  extension
  collection {
    slug
  }
}
    `;
export const GamePartsFragmentDoc = gql`
    fragment GameParts on Game {
  name
  deck
  status
  meta {
    __typename
    genre
    platform
    medium
  }
  sections {
    __typename
    ... on GameSectionsDetails {
      dateReleased
      averageRating
      averagePlaytime
      content
      learnMoreLink
    }
    ... on GameSectionsBacklog {
      interest
      content
    }
    ... on GameSectionsReview {
      dateFinished
      stars
      playtime
      content
    }
  }
  boxart
}
    `;
export const ListPartsFragmentDoc = gql`
    fragment ListParts on GameConnection {
  totalCount
  edges {
    node {
      id
      ... on Game {
        _sys {
          ...SysParts
        }
        ...GameParts
      }
    }
  }
}
    ${SysPartsFragmentDoc}
${GamePartsFragmentDoc}`;
export const GamesByNameDocument = gql`
    query gamesByName {
  gameConnection(sort: "name", first: 50) {
    ...ListParts
  }
}
    ${ListPartsFragmentDoc}`;
export const BacklogGamesByNameDocument = gql`
    query backlogGamesByName {
  gameConnection(
    sort: "name"
    filter: {status: {in: ["Playing", "Backlog"]}}
    first: 50
  ) {
    ...ListParts
  }
}
    ${ListPartsFragmentDoc}`;
export const FinishedGamesByNameDocument = gql`
    query finishedGamesByName {
  gameConnection(sort: "name", filter: {status: {eq: "Finished"}}, first: 50) {
    ...ListParts
  }
}
    ${ListPartsFragmentDoc}`;
export const GameDocument = gql`
    query game($relativePath: String!) {
  game(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...GameParts
  }
}
    ${GamePartsFragmentDoc}`;
export const GameConnectionDocument = gql`
    query gameConnection {
  gameConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...GameParts
      }
    }
  }
}
    ${GamePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      gamesByName(variables?: GamesByNameQueryVariables, options?: C): Promise<{data: GamesByNameQuery, variables: GamesByNameQueryVariables, query: string}> {
        return requester<{data: GamesByNameQuery, variables: GamesByNameQueryVariables, query: string}, GamesByNameQueryVariables>(GamesByNameDocument, variables, options);
      },
    backlogGamesByName(variables?: BacklogGamesByNameQueryVariables, options?: C): Promise<{data: BacklogGamesByNameQuery, variables: BacklogGamesByNameQueryVariables, query: string}> {
        return requester<{data: BacklogGamesByNameQuery, variables: BacklogGamesByNameQueryVariables, query: string}, BacklogGamesByNameQueryVariables>(BacklogGamesByNameDocument, variables, options);
      },
    finishedGamesByName(variables?: FinishedGamesByNameQueryVariables, options?: C): Promise<{data: FinishedGamesByNameQuery, variables: FinishedGamesByNameQueryVariables, query: string}> {
        return requester<{data: FinishedGamesByNameQuery, variables: FinishedGamesByNameQueryVariables, query: string}, FinishedGamesByNameQueryVariables>(FinishedGamesByNameDocument, variables, options);
      },
    game(variables: GameQueryVariables, options?: C): Promise<{data: GameQuery, variables: GameQueryVariables, query: string}> {
        return requester<{data: GameQuery, variables: GameQueryVariables, query: string}, GameQueryVariables>(GameDocument, variables, options);
      },
    gameConnection(variables?: GameConnectionQueryVariables, options?: C): Promise<{data: GameConnectionQuery, variables: GameConnectionQueryVariables, query: string}> {
        return requester<{data: GameConnectionQuery, variables: GameConnectionQueryVariables, query: string}, GameConnectionQueryVariables>(GameConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)

