# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  game(relativePath: String): Game!
  gameConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GameFilter): GameConnection!
}

input DocumentFilter {
  game: GameFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Game

type GameMeta {
  genre: String
  platform: String
  medium: String
}

type GameSectionsDetails {
  dateReleased: String
  averageRating: String
  averagePlaytime: String
  content: String
  learnMoreLink: String
}

type GameSectionsBacklog {
  interest: String
  content: String
}

type GameSectionsReview {
  dateFinished: String
  stars: String
  playtime: String
  content: String
}

union GameSections = GameSectionsDetails | GameSectionsBacklog | GameSectionsReview

type Game implements Node & Document {
  name: String
  deck: String
  status: String
  meta: GameMeta
  sections: [GameSections]
  boxart: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input GameMetaFilter {
  genre: StringFilter
  platform: StringFilter
  medium: StringFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input GameSectionsDetailsFilter {
  dateReleased: DatetimeFilter
  averageRating: StringFilter
  averagePlaytime: StringFilter
  content: StringFilter
  learnMoreLink: StringFilter
}

input GameSectionsBacklogFilter {
  interest: StringFilter
  content: StringFilter
}

input GameSectionsReviewFilter {
  dateFinished: DatetimeFilter
  stars: StringFilter
  playtime: StringFilter
  content: StringFilter
}

input GameSectionsFilter {
  details: GameSectionsDetailsFilter
  backlog: GameSectionsBacklogFilter
  review: GameSectionsReviewFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input GameFilter {
  name: StringFilter
  deck: StringFilter
  status: StringFilter
  meta: GameMetaFilter
  sections: GameSectionsFilter
  boxart: ImageFilter
}

type GameConnectionEdges {
  cursor: String!
  node: Game
}

type GameConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GameConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGame(relativePath: String!, params: GameMutation!): Game!
  createGame(relativePath: String!, params: GameMutation!): Game!
}

input DocumentMutation {
  game: GameMutation
}

input GameMetaMutation {
  genre: String
  platform: String
  medium: String
}

input GameSectionsDetailsMutation {
  dateReleased: String
  averageRating: String
  averagePlaytime: String
  content: String
  learnMoreLink: String
}

input GameSectionsBacklogMutation {
  interest: String
  content: String
}

input GameSectionsReviewMutation {
  dateFinished: String
  stars: String
  playtime: String
  content: String
}

input GameSectionsMutation {
  details: GameSectionsDetailsMutation
  backlog: GameSectionsBacklogMutation
  review: GameSectionsReviewMutation
}

input GameMutation {
  name: String
  deck: String
  status: String
  meta: GameMetaMutation
  sections: [GameSectionsMutation]
  boxart: String
}

schema {
  query: Query
  mutation: Mutation
}
  