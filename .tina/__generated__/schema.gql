# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getGameDocument(relativePath: String): GameDocument!
  getGameList(before: String, after: String, first: Int, last: Int): GameConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = GameDocument

type GameMeta {
  genre: String
  platform: String
  medium: String
}

type GameSectionsBacklog {
  interest: String
  content: String
}

type GameSectionsReview {
  dateFinished: String
  stars: String
  playtime: String
  content: String
}

union GameSections = GameSectionsBacklog | GameSectionsReview

type Game {
  name: String
  howLongToBeatId: String
  status: String
  meta: GameMeta
  sections: [GameSections]
  boxart: String
}

type GameDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Game!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GameConnectionEdges {
  cursor: String
  node: GameDocument
}

type GameConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [GameConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGameDocument(relativePath: String!, params: GameMutation!): GameDocument!
}

input DocumentMutation {
  game: GameMutation
}

input GameMetaMutation {
  genre: String
  platform: String
  medium: String
}

input GameSectionsBacklogMutation {
  interest: String
  content: String
}

input GameSectionsReviewMutation {
  dateFinished: String
  stars: String
  playtime: String
  content: String
}

input GameSectionsMutation {
  backlog: GameSectionsBacklogMutation
  review: GameSectionsReviewMutation
}

input GameMutation {
  name: String
  howLongToBeatId: String
  status: String
  meta: GameMetaMutation
  sections: [GameSectionsMutation]
  boxart: String
}

schema {
  query: Query
  mutation: Mutation
}
  